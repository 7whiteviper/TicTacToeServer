package model;

/**
 * Models a game lifecycle event between two users.
 * Maps to DB table 'Event'.
 */
public class Event {

    /** Enumeration for different game statuses. */
    public enum EventStatus { PENDING, DECLINED, ACCEPTED, PLAYING, COMPLETED, ABORTED }

    private int eventId;     // globally unique, auto-generated by central DB
    private String sender;   // username who sends invitation
    private String opponent; // username who receives invitation
    private EventStatus status;
    private String turn;     // username who made the last move
    private int move;        // last move (0..8)

    /** Default constructor. */
    public Event() {}

    /** Full constructor. */
    public Event(int eventId, String sender, String opponent, EventStatus status, String turn, int move) {
        this.eventId = eventId;
        this.sender = sender;
        this.opponent = opponent;
        this.status = status;
        this.turn = turn;
        this.move = move;
    }

    // Getters/Setters
    public int getEventId() { return eventId; }
    public void setEventId(int eventId) { this.eventId = eventId; }
    public String getSender() { return sender; }
    public void setSender(String sender) { this.sender = sender; }
    public String getOpponent() { return opponent; }
    public void setOpponent(String opponent) { this.opponent = opponent; }
    public EventStatus getStatus() { return status; }
    public void setStatus(EventStatus status) { this.status = status; }
    public String getTurn() { return turn; }
    public void setTurn(String turn) { this.turn = turn; }
    public int getMove() { return move; }
    public void setMove(int move) { this.move = move; }

    /** Uses eventId as the unique attribute. */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!(obj instanceof Event)) return false;
        Event other = (Event) obj;
        return this.eventId == other.eventId;
    }

    @Override
    public int hashCode() {
        return Integer.hashCode(eventId);
    }
}
